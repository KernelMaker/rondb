--source include/have_ndb.inc
--source include/have_util_curl.inc



# Create test tables db1.api_scan and db2.api_scan with different data
CREATE DATABASE db1;
USE db1;
--let RAND_SEED=491
--let NUM_ROWS=1000
--source suite/ronsql/include/ronsql_create_table_api_scan.inc
CREATE DATABASE db2;
USE db2;
--let RAND_SEED=511
--let NUM_ROWS=1000
--source suite/ronsql/include/ronsql_create_table_api_scan.inc
USE test;

# Create necessary hopsworks tables to authorize the test api key for db1
--disable_query_log
--source suite/ronsql/include/setup_hopsworks_api_keys.inc
USE test;
--enable_query_log

let $rdrs_ronsql = curl --no-progress-meter --fail-with-body -X POST
  -H "Content-Type: application/json"
  http://$RDRS_NOKEY_HOST:$RDRS_NOKEY_PORT/0.1.0/ronsql -d;

--let $query=select cchar as c, max(sint16) from api_scan group by cchar;
--let $ronsql_cli=$RONSQL_CLI_EXE --connect-string $NDB_CONNECTSTRING



--echo ===== Compare RDRS and CLI =====
--echo == RDRS: Query both tables without API key check. ==
--exec $rdrs_ronsql '{"query":"$query","database":"db1"}'
--exec $rdrs_ronsql '{"query":"$query","database":"db2"}'
--echo == CLI: Query both tables ==
--exec $ronsql_cli -D db1 -e "$query" --output-format JSON
--exec $ronsql_cli -D db2 -e "$query" --output-format JSON



--echo ===== Test RDRS API key handling =====
--echo == Valid API key authorized for db1 ==
--exec $rdrs_ronsql_with_key '{"query":"$query","database":"db1"}'
--echo == Valid API key not authorized for db2 ==
--error 22
--exec $rdrs_ronsql_with_key '{"query":"$query","database":"db2"}'
--echo
--echo == Invalid API key attempted for db1 ==
--error 22
--exec $rdrs_ronsql_with_wrong_key '{"query":"$query","database":"db1"}'
--echo
--echo == Invalid API key attempted for db2 ==
--error 22
--exec $rdrs_ronsql_with_wrong_key '{"query":"$query","database":"db2"}'
--echo



--echo ===== Test explain mode =====
--echo == CLI, SELECT, explainMode=ALLOW ==
--exec $ronsql_cli -D db1 -e "$query" --explain-mode ALLOW
--echo == RDRS, SELECT, explainMode=ALLOW ==
--exec $rdrs_ronsql '{"query":"$query","database":"db1","explainMode":"ALLOW"}'
--echo == CLI, SELECT, explainMode=FORBID ==
--exec $ronsql_cli -D db1 -e "$query" --explain-mode FORBID
--echo == RDRS, SELECT, explainMode=FORBID ==
--exec $rdrs_ronsql '{"query":"$query","database":"db1","explainMode":"FORBID"}'
--echo == CLI, SELECT, explainMode=REQUIRE ==
--error 1
--exec $ronsql_cli -D db1 -e "$query" --explain-mode REQUIRE
--echo == RDRS, SELECT, explainMode=REQUIRE ==
--error 22
--exec $rdrs_ronsql '{"query":"$query","database":"db1","explainMode":"REQUIRE"}'
--echo == CLI, SELECT, explainMode=REMOVE ==
--exec $ronsql_cli -D db1 -e "$query" --explain-mode REMOVE
--echo == RDRS, SELECT, explainMode=REMOVE ==
--exec $rdrs_ronsql '{"query":"$query","database":"db1","explainMode":"REMOVE"}'
--echo == CLI, SELECT, explainMode=FORCE ==
--exec $ronsql_cli -D db1 -e "$query" --explain-mode FORCE
--echo == RDRS, SELECT, explainMode=FORCE ==
# todo Remove "outputFormat":"TEXT" when json format implemented for explain
--exec $rdrs_ronsql '{"query":"$query","database":"db1","explainMode":"FORCE","outputFormat":"TEXT"}'
--echo == CLI, EXPLAIN SELECT, explainMode=ALLOW ==
--exec $ronsql_cli -D db1 -e "explain $query" --explain-mode ALLOW
--echo == RDRS, EXPLAIN SELECT, explainMode=ALLOW ==
# todo Remove "outputFormat":"TEXT" when json format implemented for explain
--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","explainMode":"ALLOW","outputFormat":"TEXT"}'
--echo == CLI, EXPLAIN SELECT, explainMode=FORBID ==
--error 1
--exec $ronsql_cli -D db1 -e "explain $query" --explain-mode FORBID
--echo == RDRS, EXPLAIN SELECT, explainMode=FORBID ==
--error 22
--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","explainMode":"FORBID"}'
--echo == CLI, EXPLAIN SELECT, explainMode=REQUIRE ==
--exec $ronsql_cli -D db1 -e "explain $query" --explain-mode REQUIRE
--echo == RDRS, EXPLAIN SELECT, explainMode=REQUIRE ==
# todo Remove "outputFormat":"TEXT" when json format implemented for explain
--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","explainMode":"REQUIRE","outputFormat":"TEXT"}'
--echo == CLI, EXPLAIN SELECT, explainMode=REMOVE ==
--exec $ronsql_cli -D db1 -e "explain $query" --explain-mode REMOVE
--echo == RDRS, EXPLAIN SELECT, explainMode=REMOVE ==
--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","explainMode":"REMOVE"}'
--echo == CLI, EXPLAIN SELECT, explainMode=FORCE ==
--exec $ronsql_cli -D db1 -e "explain $query" --explain-mode FORCE
--echo == RDRS, EXPLAIN SELECT, explainMode=FORCE ==
# todo Remove "outputFormat":"TEXT" when json format implemented for explain
--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","explainMode":"FORCE","outputFormat":"TEXT"}'



--echo ===== Test output format =====
UPDATE db1.api_scan SET cchar = 'GROUPåäö_2' where cchar = 'GROUPxxx_2';
--echo == CLI, SELECT, outputFormat=JSON ==
--exec $ronsql_cli -D db1 -e "$query" --output-format JSON
--echo == RDRS, SELECT, outputFormat=JSON ==
--exec $rdrs_ronsql '{"query":"$query","database":"db1","outputFormat":"JSON"}'
#todo Uncomment when RonSQL is encoding aware
#--echo == CLI, SELECT, outputFormat=JSON_ASCII ==
#--exec $ronsql_cli -D db1 -e "$query" --output-format JSON_ASCII
#--echo == RDRS, SELECT, outputFormat=JSON_ASCII ==
#--exec $rdrs_ronsql '{"query":"$query","database":"db1","outputFormat":"JSON_ASCII"}'
--echo == CLI, SELECT, outputFormat=TEXT ==
--exec $ronsql_cli -D db1 -e "$query" --output-format TEXT
--echo == RDRS, SELECT, outputFormat=TEXT ==
--exec $rdrs_ronsql '{"query":"$query","database":"db1","outputFormat":"TEXT"}'
--echo == CLI, SELECT, outputFormat=TEXT_NOHEADER ==
--exec $ronsql_cli -D db1 -e "$query" --output-format TEXT_NOHEADER
--echo == RDRS, SELECT, outputFormat=TEXT_NOHEADER ==
--exec $rdrs_ronsql '{"query":"$query","database":"db1","outputFormat":"TEXT_NOHEADER"}'
#todo Uncomment when json format implemented for explain and RonSQL is encoding aware
#--echo == CLI, EXPLAIN SELECT, outputFormat=JSON ==
#--exec $ronsql_cli -D db1 -e "explain $query" --output-format JSON
#--echo == RDRS, EXPLAIN SELECT, outputFormat=JSON ==
#--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","outputFormat":"JSON"}'
#--echo == CLI, EXPLAIN SELECT, outputFormat=JSON_ASCII ==
#--exec $ronsql_cli -D db1 -e "explain $query" --output-format JSON_ASCII
#--echo == RDRS, EXPLAIN SELECT, outputFormat=JSON_ASCII ==
#--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","outputFormat":"JSON_ASCII"}'
--echo == CLI, EXPLAIN SELECT, outputFormat=TEXT ==
--exec $ronsql_cli -D db1 -e "explain $query" --output-format TEXT
--echo == RDRS, EXPLAIN SELECT, outputFormat=TEXT ==
--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","outputFormat":"TEXT"}'
--echo == CLI, EXPLAIN SELECT, outputFormat=TEXT_NOHEADER ==
--exec $ronsql_cli -D db1 -e "explain $query" --output-format TEXT_NOHEADER
--echo == RDRS, EXPLAIN SELECT, outputFormat=TEXT_NOHEADER ==
--exec $rdrs_ronsql '{"query":"explain $query","database":"db1","outputFormat":"TEXT_NOHEADER"}'



--echo ===== Test ALTER TABLE =====
--let $query_altered=select cchar as c, max(sint16_altered) from api_scan group by cchar;
--echo == Before ALTER TABLE, old query via RDRS ==
--exec $rdrs_ronsql '{"query":"$query","database":"db1"}'
--echo == Before ALTER TABLE, old query via CLI ==
--exec $ronsql_cli -D db1 -e "$query"
--echo == Before ALTER TABLE, new query via RDRS ==
--error 22
--exec $rdrs_ronsql '{"query":"$query_altered","database":"db1"}'
--echo
--echo == Before ALTER TABLE, new query via CLI ==
--error 1
--exec $ronsql_cli -D db1 -e "$query_altered" 2>&1
--echo == ALTER TABLE ==
ALTER TABLE db1.api_scan CHANGE sint16 sint16_altered SMALLINT NULL;
--echo == After ALTER TABLE, old query via CLI ==
--error 1
--exec $ronsql_cli -D db1 -e "$query" 2>&1
--echo == After ALTER TABLE, new query via CLI ==
--exec $ronsql_cli -D db1 -e "$query_altered" 2>&1
--echo == After ALTER TABLE, new query via RDRS ==
--exec $rdrs_ronsql '{"query":"$query_altered","database":"db1"}'



--echo ===== Cleanup =====
DROP DATABASE db1;
DROP DATABASE db2;
DROP DATABASE hopsworks;
