CREATE DATABASE db1;
USE db1;
Create test table api_scan with 1000 rows
First 10 lines of the generated data:
60	\N	11347	28913	\N	13856590	1852495210	\N	\N	137199151843681	\N	-57991624807272.5	GROUPxxx_1
\N	253	-4214	42062	5	\N	-1291823820	759310692	54496948122543	\N	1637.47184263317	\N	GROUPxxx_2
\N	185	\N	\N	-7	\N	2126810539	1818745536	-78253247097334	113669147642241	\N	\N	GROUPxxx_3
14	142	-21351	1155	1	7168323	1122249593	\N	-13576493368577	9880784667119	-878.044349679942	\N	GROUPxxx_4
\N	231	15481	61768	4	15216994	1684188232	2303107558	-51683529943977	141402152412066	-26193.1646307443	57557244839341.1	\N
\N	126	-17639	60159	-9	\N	-1475880526	3944170411	\N	123528158698303	7549.26866339939	24595693245902.2	GROUPxxx_2
57	189	-14798	\N	9	8867591	-136039572	\N	\N	\N	-24865.4661346653	\N	GROUPxxx_3
\N	152	8214	19470	-6	\N	-2119797580	4272588539	-73461279368289	163480365361531	17479.9918745781	7618098767969.59	\N
-124	141	-26942	36727	\N	\N	420978937	1352960146	20822900054096	7013733049858	-1971.94931406418	-65721992495353.8	GROUPxxx_1
\N	186	-27251	26286	-5	6254338	-610647094	342290049	41834420437152	165544112261596	11854.2198355647	-89627588888589	GROUPxxx_2
Number of rows in the table:
select count(*) from api_scan;
count(*)
1000
CREATE DATABASE db2;
USE db2;
Create test table api_scan with 1000 rows
First 10 lines of the generated data:
-90	\N	\N	49256	1	2437229	1456959950	176167484	57730170387741	30866731456591	31746.9695909954	14381966982692.1	GROUPxxx_1
-62	197	\N	32468	-6	1255137	1177916760	197054648	\N	13626815300582	20971.7955331435	8070782634556.06	\N
-48	2	29603	48683	\N	\N	535991695	1715998420	\N	83760014674535	31819.3890144527	-43222343470650.1	GROUPxxx_3
43	1	-677	10180	\N	5496655	-2029854947	59198586	-47364504759788	\N	\N	23448287242059.6	GROUPxxx_4
96	134	\N	42892	-4	8216101	-99242068	4089113466	\N	115511970838882	2563.73110084546	-4077871461473.94	GROUPxxx_1
\N	124	8391	33549	4	3936103	-347959082	1490130431	-30943731705244	163979064524949	\N	-44318841491429.4	GROUPxxx_2
97	37	7732	\N	4	1203027	-716324272	4101962578	\N	\N	\N	85980487896007.2	\N
8	233	18566	51474	3	8631916	230539096	2564073167	50455322274969	\N	18102.7983501644	\N	GROUPxxx_4
61	82	13367	\N	1	11773760	-15250595	3183865126	-65632721611946	162748303856202	-7246.44445298595	67569359334330.3	GROUPxxx_1
-33	198	-25723	28199	\N	\N	-2011385362	\N	-56668926717163	112186126366626	-19448.6291126988	0	GROUPxxx_2
Number of rows in the table:
select count(*) from api_scan;
count(*)
1000
USE test;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
===== Compare RDRS and CLI =====
== RDRS: Query both tables without API key check. ==
{"data":
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_2","max(sint16)":32679}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
]
}
{"data":
[{"c":null,"max(sint16)":32343}
,{"c":"GROUPxxx_1","max(sint16)":32730}
,{"c":"GROUPxxx_2","max(sint16)":32533}
,{"c":"GROUPxxx_3","max(sint16)":32345}
,{"c":"GROUPxxx_4","max(sint16)":32253}
]
}
== CLI: Query both tables ==
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_2","max(sint16)":32679}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
]
[{"c":null,"max(sint16)":32343}
,{"c":"GROUPxxx_1","max(sint16)":32730}
,{"c":"GROUPxxx_2","max(sint16)":32533}
,{"c":"GROUPxxx_3","max(sint16)":32345}
,{"c":"GROUPxxx_4","max(sint16)":32253}
]
===== Test RDRS API key handling =====
== Valid API key authorized for db1 ==
{"data":
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_2","max(sint16)":32679}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
]
}
== Valid API key not authorized for db2 ==
API key not authorized to access db2
== Invalid API key attempted for db1 ==
API key found in cache but invalid
== Invalid API key attempted for db2 ==
API key found in cache but is invalid
===== Test explain mode =====
== CLI, SELECT, explainMode=ALLOW ==
c	max(sint16)
NULL	32566
GROUPxxx_1	32312
GROUPxxx_2	32679
GROUPxxx_3	32675
GROUPxxx_4	31560
== RDRS, SELECT, explainMode=ALLOW ==
{"data":
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_2","max(sint16)":32679}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
]
}
== CLI, SELECT, explainMode=FORBID ==
c	max(sint16)
NULL	32566
GROUPxxx_1	32312
GROUPxxx_2	32679
GROUPxxx_3	32675
GROUPxxx_4	31560
== RDRS, SELECT, explainMode=FORBID ==
{"data":
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_2","max(sint16)":32679}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
]
}
== CLI, SELECT, explainMode=REQUIRE ==
== RDRS, SELECT, explainMode=REQUIRE ==
Caught exception: Tried to query with explain mode set to REQUIRE.
== CLI, SELECT, explainMode=REMOVE ==
c	max(sint16)
NULL	32566
GROUPxxx_1	32312
GROUPxxx_2	32679
GROUPxxx_3	32675
GROUPxxx_4	31560
== RDRS, SELECT, explainMode=REMOVE ==
{"data":
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_2","max(sint16)":32679}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
]
}
== CLI, SELECT, explainMode=FORCE ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== RDRS, SELECT, explainMode=FORCE ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== CLI, EXPLAIN SELECT, explainMode=ALLOW ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== RDRS, EXPLAIN SELECT, explainMode=ALLOW ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== CLI, EXPLAIN SELECT, explainMode=FORBID ==
== RDRS, EXPLAIN SELECT, explainMode=FORBID ==
Caught exception: Tried to EXPLAIN with explain mode set to FORBID.
== CLI, EXPLAIN SELECT, explainMode=REQUIRE ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== RDRS, EXPLAIN SELECT, explainMode=REQUIRE ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== CLI, EXPLAIN SELECT, explainMode=REMOVE ==
c	max(sint16)
NULL	32566
GROUPxxx_1	32312
GROUPxxx_2	32679
GROUPxxx_3	32675
GROUPxxx_4	31560
== RDRS, EXPLAIN SELECT, explainMode=REMOVE ==
{"data":
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_2","max(sint16)":32679}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
]
}
== CLI, EXPLAIN SELECT, explainMode=FORCE ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== RDRS, EXPLAIN SELECT, explainMode=FORCE ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

===== Test output format =====
UPDATE db1.api_scan SET cchar = 'GROUPåäö_2' where cchar = 'GROUPxxx_2';
== CLI, SELECT, outputFormat=JSON ==
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
,{"c":"GROUPåäö_2","max(sint16)":32679}
]
== RDRS, SELECT, outputFormat=JSON ==
{"data":
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
,{"c":"GROUPåäö_2","max(sint16)":32679}
]
}
== CLI, SELECT, outputFormat=TEXT ==
c	max(sint16)
NULL	32566
GROUPxxx_1	32312
GROUPxxx_3	32675
GROUPxxx_4	31560
GROUPåäö_2	32679
== RDRS, SELECT, outputFormat=TEXT ==
c	max(sint16)
NULL	32566
GROUPxxx_1	32312
GROUPxxx_3	32675
GROUPxxx_4	31560
GROUPåäö_2	32679
== CLI, SELECT, outputFormat=TEXT_NOHEADER ==
NULL	32566
GROUPxxx_1	32312
GROUPxxx_3	32675
GROUPxxx_4	31560
GROUPåäö_2	32679
== RDRS, SELECT, outputFormat=TEXT_NOHEADER ==
NULL	32566
GROUPxxx_1	32312
GROUPxxx_3	32675
GROUPxxx_4	31560
GROUPåäö_2	32679
== CLI, EXPLAIN SELECT, outputFormat=TEXT ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== RDRS, EXPLAIN SELECT, outputFormat=TEXT ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated format.
The program for post-processing and output has 8 instructions.

== CLI, EXPLAIN SELECT, outputFormat=TEXT_NOHEADER ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated, header-less format.
The program for post-processing and output has 8 instructions.

== RDRS, EXPLAIN SELECT, outputFormat=TEXT_NOHEADER ==
Query parse tree:
SELECT
  Out_0:`c`
   = C0:`cchar`
  Out_1:`max(sint16)`
   = A0:Max(`sint16`)
FROM api_scan
GROUP BY
  C0:`cchar`

Aggregation program (2 instructions):
Instr. DEST SRC DESCRIPTION
Load   r00  C01 r00 = C01:`sint16`
Max    A00  r00 A00:MAX <- r00:`sint16`

Execute as table scan without any filter.
(No candidate plans for index scan.)

Output in mysql-style tab separated, header-less format.
The program for post-processing and output has 8 instructions.

===== Test ALTER TABLE =====
== Before ALTER TABLE, old query via RDRS ==
{"data":
[{"c":null,"max(sint16)":32566}
,{"c":"GROUPxxx_1","max(sint16)":32312}
,{"c":"GROUPxxx_3","max(sint16)":32675}
,{"c":"GROUPxxx_4","max(sint16)":31560}
,{"c":"GROUPåäö_2","max(sint16)":32679}
]
}
== Before ALTER TABLE, old query via CLI ==
c	max(sint16)
NULL	32566
GROUPxxx_1	32312
GROUPxxx_3	32675
GROUPxxx_4	31560
GROUPåäö_2	32679
== Before ALTER TABLE, new query via RDRS ==
Failed to get column `sint16_altered`.
Note that column names are case sensitive.
Failed to get column `sint16_altered`.
Note that column names are case sensitive.
Caught ColumnNotFoundError after 2 attempts.

== Before ALTER TABLE, new query via CLI ==
Failed to get column `sint16_altered`.
Note that column names are case sensitive.
Failed to get column `sint16_altered`.
Note that column names are case sensitive.
ronsql_cli caught ColumnNotFoundError after 2 attempts.
== ALTER TABLE ==
ALTER TABLE db1.api_scan CHANGE sint16 sint16_altered SMALLINT NULL;
== After ALTER TABLE, old query via CLI ==
Failed to get column `sint16`.
Note that column names are case sensitive.
Failed to get column `sint16`.
Note that column names are case sensitive.
ronsql_cli caught ColumnNotFoundError after 2 attempts.
== After ALTER TABLE, new query via CLI ==
c	max(sint16_altered)
NULL	32566
GROUPxxx_1	32312
GROUPxxx_3	32675
GROUPxxx_4	31560
GROUPåäö_2	32679
== After ALTER TABLE, new query via RDRS ==
{"data":
[{"c":null,"max(sint16_altered)":32566}
,{"c":"GROUPxxx_1","max(sint16_altered)":32312}
,{"c":"GROUPxxx_3","max(sint16_altered)":32675}
,{"c":"GROUPxxx_4","max(sint16_altered)":31560}
,{"c":"GROUPåäö_2","max(sint16_altered)":32679}
]
}
===== Cleanup =====
DROP DATABASE db1;
DROP DATABASE db2;
DROP DATABASE hopsworks;
